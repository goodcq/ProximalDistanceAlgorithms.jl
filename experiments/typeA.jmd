```{julia}
using Pkg, ProximalGradient, LinearAlgebra, Statistics
pkgdir = ProximalGradient |> pathof |> dirname |> dirname

include(joinpath(pkgdir, "experiments", "utils.jl"))

φ(x) = norm(x, 2)^2
φ(x...) = sum(xi^2 for xi in x)

using Plots
gr(legend = false)
```

```{julia}
n = 100
d = 1
snr = 100

X, xdata = generate_predictors(d, n)
y, φ_n = generate_samples(φ, xdata, snr)

plot(xlabel = "x", ylabel = "phi(x)",
    title = "d = $d, n = $n, SNR = $snr",
    legend = true)
scatter!(X', y, label = "sample")
scatter!(X', φ_n, label = "evaluated")
plot!(-1:0.1:1, φ, label = "function")
```


```{julia}
θ, ξ, W = @time fit_proxgrad(y, X, maxiters = 1, ρ_init = 1.0)

plot(xlabel = "x", ylabel = "phi(x)",
    title = "d = $d, n = $n, SNR = $snr",
    legend = true)
scatter!(X', y, label = "sample")
scatter!(X', θ, label = "fit")
plot!(-1:0.1:1, φ, label = "function")
```

```{julia}
plot(trace.loss,
    xlabel = "iterations",
    ylabel = "loss",
    yscale = :log10)
```

```{julia}
plot(trace.primal_feasibility,
    xlabel = "iterations",
    ylabel = "log(primal feasibility)")
```

```{julia}
plot(trace.gradient_norm,
    xlabel = "iterations",
    ylabel = "log(gradient)",
    yscale = :log10)
```
