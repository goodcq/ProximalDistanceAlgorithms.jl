---
title: Example 5, Reducing Condition Numbers
weave_options:
    fig_ext: .svg
---

```{julia}
using ProximalDistanceAlgorithms
using Random, LinearAlgebra, MatrixDepot, Plots, DataFrames
include("plotutils.jl")
```

### Introduction

```{julia}
@doc reduce_cond
```

### Example

```{julia}
Random.seed!(5357)
M = matrixdepot("randcorr", 1000)
cond(M)
```

```{julia}
F = svd(M)
F.S
```

#### Setup

```{julia}
function solve(c, F, algorithm, maxiters, penalty; mu = 1.0)
    # use Nesterov acceleration unless we're running ADMM
    accel = algorithm isa ADMM ? Val(:none) : Val(:nesterov)

    if !(algorithm isa MMSubSpace)
        if algorithm isa SteepestDescent
            println("Steepest Descent + Nesterov")
        elseif algorithm isa MM
            println("MM + Nesterov")
        else
            println("ADMM")
        end

        # track loss, penalized objective, gradient, etc.
        history = initialize_history(maxiters+1)

        # warm-up
        println(" | warm-up:")
        print(" | ")
        @time reduce_cond(algorithm, c, F,
            maxiters = 100,
            penalty = penalty,
            accel = accel,
            ls = nothing,
            history = history)

        # real timing
        println(" | result:")
        print(" | ")
        history = initialize_history(maxiters+1)
        solution = @time reduce_cond(algorithm, c, F,
            maxiters = maxiters,
            penalty = penalty,
            accel = accel,
            ls = nothing,
            history = history)
    else
        # track loss, penalized objective, gradient, etc.
        h1 = initialize_history(maxiters+1)
        h2 = initialize_history(maxiters+1)
        history = (lsqr = h1, cg = h2)

        sol = []

        for (ls, h) in zip((Val(:LSQR), Val(:CG)), (h1, h2))
            K = ProximalDistanceAlgorithms.subspace_size(algorithm)
            println("MMSubSpace w/ $(K) descent directions")

            println(" | warm-up:")
            print(" | ")
            tmp = initialize_history(maxiters+1)
            @time reduce_cond(algorithm, c, F,
                maxiters = 100,
                penalty = penalty,
                accel = accel,
                history = tmp,
                ls = ls,
                mu = mu)

            # real timing
            println(" | result:")
            print(" | ")
            s = @time reduce_cond(algorithm, c, F,
                maxiters = maxiters,
                penalty = penalty,
                accel = accel,
                history = h,
                ls = ls,
                mu = mu)

            push!(sol, s)
        end

        solution = (lsqr = sol[1], cg = sol[2])
    end

    return solution, history
end
```

### Fusion matrix

```{julia}
c = 10.0
D = CondNumFM(c, size(M,1)); S = instantiate_fusion_matrix(D)
size(D)
```

```{julia}
unicodeplots()
spy(S)
```

```{julia}
spy(S'S)
```

#### Annealing schedules

```{julia}
penalty(œÅ, n) = min(1e6, 1.1 ^ floor(n/20))
gr(linewidth=2)

maxiters = 2000
xs = 1:maxiters
plot(xs, penalty.(1, xs), legend = nothing)
xlabel!("iteration")
ylabel!("rho")
```

#### MM

```{julia}
MM_sol, MM_trace = solve(c, F, MM(), maxiters, penalty)
plot_summary(MM_trace)
```

#### Steepest Descent

```{julia}
SD_sol, SD_trace = solve(c, F, SteepestDescent(), maxiters, penalty)
plot_summary(SD_trace)
```

#### ADMM

```{julia}
ADMM_sol, ADMM_trace = solve(c, F, ADMM(), maxiters, penalty)
plot_summary(ADMM_trace)
```

#### MMSubspace

```{julia}
MMS5_sol, MMS5_trace = solve(c, F, MMSubSpace(5), maxiters, penalty)
plot_summary(MMS5_trace.lsqr)
```

```{julia}
MMS10_sol, MMS10_trace = solve(c, F, MMSubSpace(10), maxiters, penalty)
plot_summary(MMS10_trace.cg)
```

### Quality of solutions

Quantify how much structure in the original matrix is preserved by checking signs of components.

$$
\mathrm{fidelity}(A, B)
=
100 \times \frac{\sum_{ij} 1 - |\mathrm{sign}(A_{ij}) - \mathrm{sign}(B_{ij})|}{p^{2}},
\qquad
A,B \in \mathbb{R}^{p \times p}
$$

```{julia}
algname = [
    "MM", "SD", "ADMM", "MMS(5) + LSQR", "MMS(5) + CG", "MMS(10) + LSQR", "MMS(10) + CG"
]
df = table_summary(MM_trace, SD_trace, ADMM_trace, MMS5_trace.lsqr, MMS5_trace.cg, MMS10_trace.lsqr, MMS10_trace.cg, algname = algname)

fidelity(A, B) = 100 * sum(1 .- abs.(sign.(A) .- sign.(B))) / length(B)

df[!, :fidelity] = [
    fidelity(MM_sol, M),
    fidelity(SD_sol, M),
    fidelity(ADMM_sol, M),
    fidelity(MMS5_sol.lsqr, M),
    fidelity(MMS5_sol.cg, M),
    fidelity(MMS10_sol.lsqr, M),
    fidelity(MMS10_sol.cg, M),
]

df
```

### Appendix

```{julia}
using Pkg; Pkg.status()
```

```{julia}
using InteractiveUtils; versioninfo()
```
