---
title: Benchmarks 2, Convex Regression
---

```{julia; echo=false; results="hidden"}
include("plotutils.jl")
include("tableutils.jl")
#
#   build summary function
#
problem = "cvxreg"
params = [:features, :samples]
grouping = [:features, :samples, :algorithm]
transformations = (
        :cpu_time => mean,
        :cpu_time => std,
    )
summarize = function(x, transformations; kwargs...)
    df = summarize_experiments(problem, x, params;
        transformations=transformations, kwargs...)
    return df
end
```

```{julia; echo=false}
CLEAN = false

if CLEAN
    DIREXAMPLE = joinpath("aw-area51", problem)
    ncovariates = (1, 2, 10, 20)
    nsamples = (50, 100, 200, 400)

    # benchmark = DataFrame[]
    # history = DataFrame[]

    for d in ncovariates, n in nsamples
        example = "$(d)_$(n)"
        println("Processing example $(example)")
        cols = [:features, :samples]
        vals = [d, n]
        #
        # benchmark files; need to add dataset column
        #
        println("   Checking benchmark files...")
        for file in glob("*$(example)*.dat", joinpath(DIREXAMPLE, "benchmarks"))
            println("   - $(file) matched.")
            df = CSV.read(file)
            tmp = add_missing_columns(df, cols, vals)
            CSV.write(file, tmp)
            # push!(benchmark, tmp)
        end
        #
        # history files; need to add dataset, features, samples, and classes columns
        #
        println("   Checking history files...")
        for file in glob("*$(example)*.dat", joinpath(DIREXAMPLE, "figures"))
            println("   - $(file) matched.")
            #
            # read, extract problem data, and add to DataFrame
            #
            df = CSV.read(file)
            tmp = add_missing_columns(df, cols, vals)
            CSV.write(file, tmp)
            # push!(history, tmp)
        end
        println()
    end
end
```

### MM

```{julia; echo=false}
colnames = [
    "covariates", "samples",
    "CG (mean)", "LSQR (mean)",
    "CG (std)", "LSQR (std)"
]
df = summarize("MM_*.dat", transformations)
rename!(df, colnames)
sort!(df, [:covariates, :samples])
latexify(df, fmt = FancyNumberFormatter(4))
```

### Steepest Descent

```{julia; echo=false}
colnames = [
    "covariates", "samples",
    "mean", "std"
]
df = summarize("SD_*.dat", transformations, regex=r"[^_]*_")
rename!(df, colnames)
sort!(df, [:covariates, :samples])
latexify(df, fmt = FancyNumberFormatter(4))
```

### ADMM

```{julia; echo=false}
colnames = [
    "covariates", "samples",
    "CG (mean)", "LSQR (mean)",
    "CG (std)", "LSQR (std)"
]
df = summarize("ADMM_*.dat", transformations)
rename!(df, colnames)
sort!(df, [:covariates, :samples])
latexify(df, fmt = FancyNumberFormatter(4))
```

### MM Subspace (5)

```{julia; echo=false}
colnames = [
    "covariates", "samples",
    "CG (mean)", "LSQR (mean)",
    "CG (std)", "LSQR (std)"
]
df = summarize("MMS*.dat", transformations)
rename!(df, colnames)
sort!(df, [:covariates, :samples])
latexify(df, fmt = FancyNumberFormatter(4))
```

### Table 2

```{julia; echo=false}
#
#   selected algorithms
#
experiments = ("MM_CG", "SD_", "ADMM_CG",)
#
#   benchmark data
#
transformations = (:cpu_time => mean, :MSE => first)
benchmark = DataFrame[]
for experiment in experiments
    push!(benchmark, summarize(experiment*"*.dat", transformations, directory="benchmarks", regex=r"[^_]*_"))
end
#
#   convergence history
#
transformations = (
    :loss      => last,
    :distance  => last,
    :iteration => last,
)
history = DataFrame[]
for experiment in experiments
    push!(history, summarize(experiment*"*.dat", transformations, directory="figures"))
end
#
# sort table by samples, then features
#
for i in eachindex(benchmark)
    sort!(benchmark[i], [:samples, :features])
    sort!(history[i], [:samples, :features])
end
#
# assemble table
#
tscale = 1e0
lscale = 1e2
dscale = 1e3
mscale = 1e3
maindf = DataFrame(
            d        = benchmark[1].features,
            n        = benchmark[1].samples,
            timeMM   = benchmark[1][!, 3] * tscale,
            timeSD   = benchmark[2][!, 3] * tscale,
            timeADMM = benchmark[3][!, 3] * tscale,
            lossMM   = history[1][!, 3] * lscale,
            lossSD   = history[2][!, 3] * lscale,
            lossADMM = history[3][!, 3] * lscale,
            distMM   = history[1][!, 4] * dscale,
            distSD   = history[2][!, 4] * dscale,
            distADMM = history[3][!, 4] * dscale,
            mseMM    = benchmark[1][!, 4] * mscale,
            mseSD    = benchmark[2][!, 4] * mscale,
            mseADMM  = benchmark[3][!, 4] * mscale,
       )
#
# pass to Latexify for formatting and pretty printing
#
latexify(maindf, fmt = FancyNumberFormatter(4))
```

### Table 7: SD + ADMM hybrid

```{julia; echo=false}

```