---
title: Benchmarks 2, Convex Regression
---

```{julia; echo=false; results="hidden"}
include("plotutils.jl")
include("tableutils.jl")
#
#   build summary function
#
problem = "cvxreg"
params = [:features, :samples]
grouping = [:features, :samples, :algorithm]
transformations = (
        :cpu_time => mean,
        :cpu_time => std,
    )
summarize = function(x, transformations; kwargs...)
    df = summarize_experiments(problem, x, params;
        transformations=transformations, kwargs...)
    return df
end
```

```{julia; echo=false}
CLEAN = false

if CLEAN
    DIREXAMPLE = joinpath("aw-area51", problem)
    ncovariates = (1, 2, 10, 20)
    nsamples = (50, 100, 200, 400)

    # benchmark = DataFrame[]
    # history = DataFrame[]

    for d in ncovariates, n in nsamples
        example = "$(d)_$(n)"
        println("Processing example $(example)")
        cols = [:features, :samples]
        vals = [d, n]
        #
        # benchmark files; need to add dataset column
        #
        println("   Checking benchmark files...")
        for file in glob("*$(example)*.dat", joinpath(DIREXAMPLE, "benchmarks"))
            println("   - $(file) matched.")
            df = CSV.read(file)
            tmp = add_missing_columns(df, cols, vals)
            CSV.write(file, tmp)
            # push!(benchmark, tmp)
        end
        #
        # history files; need to add dataset, features, samples, and classes columns
        #
        println("   Checking history files...")
        for file in glob("*$(example)*.dat", joinpath(DIREXAMPLE, "figures"))
            println("   - $(file) matched.")
            #
            # read, extract problem data, and add to DataFrame
            #
            df = CSV.read(file)
            tmp = add_missing_columns(df, cols, vals)
            CSV.write(file, tmp)
            # push!(history, tmp)
        end
        println()
    end
end
```

Benchmark convex regression problem for input data $y_{i} = \varphi(\boldsymbol{x}_{i})$ with $\boldsymbol{x}_{i} \mathbb{R}^{d}$, with sample size $n$.
Convergence parameters are set to $\epsilon_{1} = 10^{-6}$ and $\epsilon_{2} = 10^{-3}$.
The annealing schedule used is $\rho_{n} = 1.75^{\lfloor{n/100}\rfloor}$.

### MM

```{julia; echo=false}
colnames = [
    "covariates", "samples",
    "CG (mean)", "LSQR (mean)",
    "CG (std)", "LSQR (std)"
]
df = summarize("MM_*.dat", transformations)
rename!(df, colnames)
sort!(df, [:covariates, :samples])
latexify(df, fmt = FancyNumberFormatter(4))
```

### Steepest Descent

```{julia; echo=false}
colnames = [
    "covariates", "samples",
    "mean", "std"
]
df = summarize("SD_*.dat", transformations, regex=r"[^_]*_")
rename!(df, colnames)
sort!(df, [:covariates, :samples])
latexify(df, fmt = FancyNumberFormatter(4))
```

### ADMM

```{julia; echo=false}
colnames = [
    "covariates", "samples",
    "CG (mean)", "LSQR (mean)",
    "CG (std)", "LSQR (std)"
]
df = summarize("ADMM_*.dat", transformations)
rename!(df, colnames)
sort!(df, [:covariates, :samples])
latexify(df, fmt = FancyNumberFormatter(4))
```

### MM Subspace (5)

```{julia; echo=false}
colnames = [
    "covariates", "samples",
    "CG (mean)", "LSQR (mean)",
    "CG (std)", "LSQR (std)"
]
df = summarize("MMS5*.dat", transformations)
rename!(df, colnames)
sort!(df, [:covariates, :samples])
latexify(df, fmt = FancyNumberFormatter(4))
```

### MM Subspace (10)

```{julia; echo=false}
colnames = [
    "covariates", "samples",
    "CG (mean)", "LSQR (mean)",
    "CG (std)", "LSQR (std)"
]
df = summarize("MMS10*.dat", transformations)
rename!(df, colnames)
sort!(df, [:covariates, :samples])
latexify(df, fmt = FancyNumberFormatter(4))
```

### Table 2: MM vs SD vs ADMM

- Based on version using CG for linear solve
- scale loss by $10^{3}$
- scale distance by $10^{3}$
- scale MSE by $10^{3}$

```{julia; echo=false}
#
#   selected algorithms
#
experiments = ("MM_CG", "SD_", "ADMM_CG",)
#
#   benchmark data
#
transformations = (:cpu_time => mean, :MSE => first)
benchmark = DataFrame[]
for experiment in experiments
    push!(benchmark, summarize(experiment*"*.dat", transformations, directory="benchmarks", regex=r"[^_]*_"))
end
#
#   convergence history
#
transformations = (
    :loss      => last,
    :distance  => last,
    :iteration => last,
)
history = DataFrame[]
for experiment in experiments
    push!(history, summarize(experiment*"*.dat", transformations, directory="figures"))
end
#
# sort table by samples, then features
#
for i in eachindex(benchmark)
    sort!(benchmark[i], [:samples, :features])
    sort!(history[i], [:samples, :features])
end
#
# assemble table
#
tscale = 1e0 # x 1
lscale = 1e3 # x 100
dscale = 1e3 # x 1000
mscale = 1e3 # x 1000
maindf = DataFrame(
            d        = benchmark[1].features,
            n        = benchmark[1].samples,
            timeMM   = benchmark[1][!, 3] * tscale,
            timeSD   = benchmark[2][!, 3] * tscale,
            timeADMM = benchmark[3][!, 3] * tscale,
            lossMM   = history[1][!, 3] * lscale,
            lossSD   = history[2][!, 3] * lscale,
            lossADMM = history[3][!, 3] * lscale,
            distMM   = history[1][!, 4] * dscale,
            distSD   = history[2][!, 4] * dscale,
            distADMM = history[3][!, 4] * dscale,
            mseMM    = benchmark[1][!, 4] * mscale,
            mseSD    = benchmark[2][!, 4] * mscale,
            mseADMM  = benchmark[3][!, 4] * mscale,
       )
#
# pretty printing for output
#
rename!(maindf, [
    "d", "n",
    "time (MM)", "time (SD)", "time (ADMM)",
    "loss (MM)", "loss (SD)", "loss (ADMM)",
    "dist (MM)", "dist (SD)", "dist (ADMM)",
    "MSE (MM)", "MSE (SD)", "MSE (ADMM)",
])
#
# pass to Latexify for formatting and pretty printing
#
latexify(maindf, fmt = FancyNumberFormatter(4))
```

### Table 7: SD + ADMM hybrid

```{julia; echo=false}
using LinearAlgebra

transformations1 = (
    :cpu_time => mean,
    :cpu_time => std,
    :MSE => first,
)
lengthm2(x) = length(x) - 2
transformations2 = (
    :loss => last,
    :distance => last,
    :iteration => lengthm2, # 2 extra records for initialization
)

colnames = [
    "d", "n",
    "time (mean)", "time (std)", "MSE",
    "loss", "distance", "iteration"
]
df1 = summarize("SDADMM_CG*.dat", transformations1)
df2 = summarize("SDADMM_CG*.dat", transformations2, directory="figures")
df = join(df1, df2, on=[:features, :samples])
rename!(df, Symbol.(colnames))

for i in 1:nrow(df)
    d = df.d[i]
    n = df.n[i]
    yin = CSV.read("aw-area51/cvxreg/benchmarks/SDADMM_CG_$(d)_$(n)_y.in") |> Matrix
    yout = CSV.read("aw-area51/cvxreg/benchmarks/SDADMM_CG_$(d)_$(n)_theta.out") |> Matrix
    df.loss[i] = norm(yin-yout)^2 / 2
end

df.loss .*= lscale      # x 100
df.distance .*= dscale  # x 1000
df.MSE .*= mscale       # x 1000

latexify(df, fmt=FancyNumberFormatter(4))
```