---
title: Benchmark 4, Image Denoising
---

```{julia; echo=false; results="hidden"}
include("plotutils.jl")
include("tableutils.jl")
#
#   build summary function
#
problem = "denoise"
params = [:image, :width, :height]
grouping = [:image, :width, :height, :algorithm]
transformations = (
        :cpu_time => mean,
        :cpu_time => std,
    )
summarize = function(x, transformations; kwargs...)
    df = summarize_experiments(problem, x, params;
        transformations=transformations, kwargs...)
    return df
end
```

```{julia; echo=false}
CLEAN = false

if CLEAN
    #
    # missing columns
    #
    PROBLEM = Dict(
        :cameraman    => (image="cameraman", width=512, height=512),
        :peppers_gray => (image="peppers_gray", width=512, height=512),
    )
    DIREXAMPLE = joinpath("aw-area51", "denoise")
    for example in ["cameraman", "peppers_gray"]
        println("Processing example $(example)")
        #
        # benchmark files; need to add
        #
        println("   Checking benchmark files...")
        for file in glob("*$(example)*.dat", joinpath(DIREXAMPLE, "benchmarks"))
            println("   - $(file) matched.")
            df = CSV.read(file)
            cols = [:image]
            vals = [example]
            tmp = add_missing_columns(df, cols, vals)
            CSV.write(file, tmp)
        end
        #
        # validation files
        #
        println("   Checking validation files...")
        for file in glob("*$(example)*validation.out", joinpath(DIREXAMPLE, "benchmarks"))
            println("   - $(file) matched.")
            df = CSV.read(file)
            key = Symbol(example)
            probdata = PROBLEM[key]
            cols = keys(probdata)
            vals = values(probdata)
            tmp = add_missing_columns(df, cols, vals)
            CSV.write(file, tmp)
        end
        #
        # history files
        #
        println("   Checking history files...")
        for file in glob("*$(example)*.dat", joinpath(DIREXAMPLE, "figures"))
            println("   - $(file) matched.")
            df = CSV.read(file)
            key = Symbol(example)
            probdata = PROBLEM[key]
            cols = keys(probdata)
            vals = values(probdata)
            tmp = add_missing_columns(df, cols, vals)
            CSV.write(file, tmp)
        end
    end
end
```

### Table 4

```{julia; echo=false}
#
#   selected algorithms
#
experiments = ("SD",)
#
#   benchmark data
#
transformations = (
    :cpu_time => mean,
)
benchmark = DataFrame[]
for experiment in experiments
    push!(benchmark, summarize(experiment*"*l1*.dat", transformations,
        directory="benchmarks", regex=r"[^_]*_"))
end
#
#   convergence history + validation metrics
#
history = DataFrame[]
for experiment in experiments
    raw1 = glob_benchmark_data(problem, experiment*"*l1*validation.out", params, regex=r"[^_]*_")
    raw2 = glob_benchmark_data(problem, experiment*"*l1*.dat", params, regex=r"[^_]*_", directory="figures")
    gdf1 = groupby(raw1, params)
    gdf2 = groupby(raw2, params)
    optimal = DataFrame[]

    for (sub1, sub2) in zip(gdf1, gdf2)
        idx = argmin(sub1.MSE)
        tmp1 = DataFrame(sub1[idx,:])
        tmp2 = DataFrame(sub2[idx,:])

        # add column to indicate number of candidate images
        n = nrow(sub1)
        tmp1.candidates = [n]
        push!(optimal, join(tmp1, tmp2, on=[params; :algorithm]))
    end

    push!(history, vcat(optimal...))
end

# sort by image name
for i in eachindex(benchmark)
    sort!(benchmark[i], [:image])
    sort!(history[i], [:image])
end

# set scaling for columns
tscale = 1e0
lscale = 1e0
dscale = 1e3
iscale = 1e0

# assemble table
maindf = DataFrame(
            image  = benchmark[1].image,
            width  = benchmark[1].width,
            height = benchmark[1].height,
            time   = benchmark[1][!, 4] * tscale,
            loss   = history[1][!,12] * lscale,
            dist   = history[1][!,13] * dscale,
            MSE    = history[1][!, 5],
            PSNR   = history[1][!, 5],
            ncand  = history[1][!,10],
       )

# pass to Latexify for formatting and pretty printing
latexify(maindf, fmt = FancyNumberFormatter(4))
```

### Figure 1

##### cameraman

**noisy input**

![cameraman-noisy](../aw-area51/denoise/cameraman_noisy.png)

**50% reduction**

![cameraman-first](../aw-area51/denoise/benchmarks/SD_cameraman_l1_sparsity=50.0.png)

**60.45% reduction**

![cameraman-best](../aw-area51/denoise/benchmarks/SD_cameraman_l1_sparsity=60.446.png)

**78.47% reduction**

![cameraman-next](../aw-area51/denoise/benchmarks/SD_cameraman_l1_sparsity=78.467.png)

##### peppers_gray

**noisy input**

![peppers-noisy](../aw-area51/denoise/peppers_gray_noisy.png)

**50% reduction**

![peppers-first](../aw-area51/denoise/benchmarks/SD_peppers_gray_l1_sparsity=50.0.png)

**58.15% reduction**

![peppers-best](../aw-area51/denoise/benchmarks/SD_peppers_gray_l1_sparsity=58.146.png)

**75.42% reduction**

![peppers-next](../aw-area51/denoise/benchmarks/SD_peppers_gray_l1_sparsity=75.417.png)
