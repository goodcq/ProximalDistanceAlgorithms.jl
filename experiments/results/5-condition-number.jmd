---
title: Benchmarks 5, Condition Number
---

```{julia; echo=false; results="hidden"}
include("plotutils.jl")
include("tableutils.jl")
#
#   build summary function
#
problem = "condnum"
params = [:p, :α]
grouping = [:p, :α, :algorithm]
transformations = (
        :cpu_time => mean,
        :cpu_time => std,
    )
summarize = function(x, transformations; kwargs...)
    df = summarize_experiments(problem, x, params;
        transformations=transformations, kwargs...)
    return df
end
```

```{julia; echo=false}
CLEAN = false

if CLEAN
    DIREXAMPLE = joinpath("aw-area51", problem)
    nsv = (10, 100, 1000)
    target = (0.2, 0.4, 0.6, 0.8)

    # benchmark = DataFrame[]
    # history = DataFrame[]

    for p in nsv, α in target
        example = "$(p)_$(α)0"
        println("Processing example $(example)")
        cols = [:p, :α]
        vals = [p, α]
        #
        # benchmark files; need to add dataset column
        #
        println("   Checking benchmark files...")
        for file in glob("*$(example)*.dat", joinpath(DIREXAMPLE, "benchmarks"))
            println("   - $(file) matched.")
            df = CSV.read(file)
            tmp = add_missing_columns(df, cols, vals)
            CSV.write(file, tmp)
            # push!(benchmark, tmp)
        end
        #
        # history files; need to add dataset, features, samples, and classes columns
        #
        println("   Checking history files...")
        for file in glob("*$(example)*.dat", joinpath(DIREXAMPLE, "figures"))
            println("   - $(file) matched.")
            #
            # read, extract problem data, and add to DataFrame
            #
            df = CSV.read(file)
            tmp = add_missing_columns(df, cols, vals)
            CSV.write(file, tmp)
            # push!(history, tmp)
        end
        println()
    end
end
```

### MM Algorithm

```{julia; echo=false}
colnames = [
    "singular values", "percent",
    "time (mean)", "time (std)",
]
df = summarize("MM_*.dat", transformations)
rename!(df, colnames)
sort!(df, Symbol.(colnames[1:2]))
latexify(df, fmt=FancyNumberFormatter(4))
```

### Steepest Descent

```{julia; echo=false}
colnames = [
    "singular values", "percent",
    "time (mean)", "time (std)",
]
df = summarize("SD_*.dat", transformations)
rename!(df, colnames)
sort!(df, Symbol.(colnames[1:2]))
latexify(df, fmt=FancyNumberFormatter(4))
```

### ADMM

```{julia; echo=false}
colnames = [
    "singular values", "percent",
    "time (mean)", "time (std)",
]
df = summarize("ADMM_*.dat", transformations)
rename!(df, colnames)
sort!(df, Symbol.(colnames[1:2]))
latexify(df, fmt=FancyNumberFormatter(4))
```

### MM Subspace (5)

```{julia; echo=false}
colnames = [
    "singular values", "percent",
    "time (mean)", "time (std)",
]
df = summarize("MMS*.dat", transformations)
rename!(df, colnames)
sort!(df, Symbol.(colnames[1:2]))
latexify(df, fmt=FancyNumberFormatter(4))
```

### Table 5

```{julia; echo=false}
#
#   selected algorithms
#
experiments = ("MM_", "SD_", "ADMM_",)
#
#   benchmark data
#
transformations = (
    :cpu_time => mean,
    :condM => first,
    :condX => first,
    :fidelity => first,
)
benchmark = DataFrame[]
for experiment in experiments
    push!(benchmark, summarize(experiment*"*.dat", transformations, directory="benchmarks", regex=r"[^_]*_"))
end
#
#   convergence history
#
transformations = (
    :loss      => last,
    :distance  => last,
    :iteration => last,
)
history = DataFrame[]
for experiment in experiments
    push!(history, summarize(experiment*"*.dat", transformations, directory="figures"))
end
#
# sort table by no. of singular values, then percent reduction
#
for i in eachindex(benchmark)
    sort!(benchmark[i], [:p, :α])
    sort!(history[i], [:p, :α])
end
#
# assemble table
#
tscale = 1e3 # x 1000 (milliseconds)
lscale = 1e3 # x 1000
dscale = 1e3 # x 1000
maindf = DataFrame(
        p           = benchmark[1].p,
        cond_input  = benchmark[1][!,4],
        reduction   = benchmark[1][!,2] .* 100,
        time_MM     = benchmark[1][!,3] .* tscale,
        time_SD     = benchmark[2][!,3] .* tscale,
        time_ADMM   = benchmark[3][!,3] .* tscale,
        loss_MM     = history[1][!,3] .* lscale,
        loss_SD     = history[2][!,3] .* lscale,
        loss_ADMM   = history[3][!,3] .* lscale,
        dist_MM     = history[1][!,4] .* dscale,
        dist_SD     = history[2][!,4] .* dscale,
        dist_ADMM   = history[3][!,4] .* dscale,
        cond_MM     = benchmark[1][!,5],
        cond_SD     = benchmark[2][!,5],
        cond_ADMM   = benchmark[3][!,5],
    )
#
# pass to Latexify for formatting and pretty printing
#
latexify(maindf, fmt = FancyNumberFormatter(4))
```